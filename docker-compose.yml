version: '3.8'
services:

  redis:
    container_name: ${REDIS__CONTAINER__NAME}
    restart: always
    image: redis:7.0.4
    volumes:
      - redis-vol:/data
    ports:
      - ${REDIS__PORT}:6379
    healthcheck:
      test: ls -l /proc/*/exe | grep redis
      start_period: 5s
      interval: 5s
      timeout: 5s
      retries: 10

  database:
    image: mysql:8.0.29
    container_name: ${MYSQL__CONTAINER__NAME}
    restart: always
    environment:
      MYSQL_ROOT_PASSWORD: ${MYSQL__ROOT_PASSWORD}
      MYSQL_USER: ${MYSQL__USER}
      MYSQL_PASSWORD: ${MYSQL__PASSWORD}
      MYSQL_DATABASE: ${MYSQL__DATABASE}
    volumes:
      - vol:/var/lib/mysql
    ports:
      - ${MYSQL__PORT}:3306
    healthcheck:
      test: mysqladmin ping -h 127.0.0.1 -u $$MYSQL_USER --password=$$MYSQL_PASSWORD
      start_period: 5s
      interval: 5s
      timeout: 5s
      retries: 10

  updater:
    container_name: ${UPDATER__CONTAINER__NAME}
    entrypoint: python start_updates.py
    restart: always
    environment:
      - MYSQL__HOST=${MYSQL__CONTAINER__NAME}
    build:
      context: .
      args:
        LOCAL_DIR: backend
      dockerfile: backend/Dockerfile.db
    depends_on:
      database:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ls -l /proc/*/exe | grep python
      start_period: 5s
      interval: 5s
      timeout: 5s
      retries: 10

  api:
    container_name: ${API__CONTAINER__NAME}
    entrypoint: python api_main.py
    restart: always
    environment:
      - MYSQL__HOST=${MYSQL__CONTAINER__NAME}
      - API__STARTUP__UVICORN_RELOAD=False
      - REDIS__HOST=${REDIS__CONTAINER__NAME}
    build:
      context: .
      args:
        LOCAL_DIR: backend
      dockerfile: backend/Dockerfile.api
    ports:
      - ${API__STARTUP__PORT}:${API__STARTUP__PORT}
    depends_on:
      updater:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ls -l /proc/*/exe | grep python
      start_period: 5s
      interval: 5s
      timeout: 5s
      retries: 10

  dev-server:
    container_name: ${REACT_APP__CONTAINER__NAME}
    entrypoint: npm start
    restart: always
    environment:
      - PORT=${REACT_APP__PORT}
      - REACT_APP_PROXY_HOST=http://${API__CONTAINER__NAME}:${API__STARTUP__PORT}
    build:
      context: .
      args:
        LOCAL_DIR: frontend
      dockerfile: frontend/Dockerfile.frontend
    depends_on:
      api:
        condition: service_healthy
    ports:
      - ${REACT_APP__PORT}:${REACT_APP__PORT}

  prod-server:
    container_name: nginx-server
    restart: always
    environment:
      - NGINX_UPSTREAM=${API__CONTAINER__NAME}:${API__STARTUP__PORT}
      - NGINX_SERVER_PORT=80
      - NGINX_API_PREFIX=${API__PREFIX}
    build:
      context: .
      args:
        LOCAL_DIR: frontend
      dockerfile: Dockerfile.nginx
    depends_on:
      api:
        condition: service_healthy
    ports:
      - ${REACT_APP__PORT}:80

volumes:
  vol:
  redis-vol:
